name: Auto Release

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: "Version bump type"
        required: true
        default: "auto"
        type: choice
        options:
          - auto
          - patch
          - minor
          - major
      skip_version_check:
        description: "Skip version existence check"
        required: false
        default: false
        type: boolean

jobs:
  auto-release:
    runs-on: ubuntu-latest

    permissions:
      contents: write
      pull-requests: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for version calculation
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.24"

      - name: Get latest tag
        id: latest_tag
        run: |
          # Get the latest tag, default to v1.0.0 if no tags exist
          LATEST_TAG=$(git tag --list --sort=-version:refname | head -n 1)
          if [ -z "$LATEST_TAG" ]; then
            LATEST_TAG="v1.0.0"
          fi
          echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
          echo "Latest tag: $LATEST_TAG"

      - name: Analyze commits for version bump
        id: version_bump
        run: |
          LATEST_TAG="${{ steps.latest_tag.outputs.latest_tag }}"
          INPUT_VERSION_TYPE="${{ github.event.inputs.version_type }}"

          # Get commits since last tag
          if [ "$LATEST_TAG" = "v1.0.0" ] && [ -z "$(git tag -l v1.0.0)" ]; then
            # No tags exist, analyze all commits
            COMMITS=$(git log --pretty=format:"%s" --no-merges)
          else
            # Get commits since last tag
            COMMITS=$(git log ${LATEST_TAG}..HEAD --pretty=format:"%s" --no-merges)
          fi

          echo "Commits to analyze:"
          echo "$COMMITS"

          # Use manual input if provided, otherwise auto-detect
          if [ "$INPUT_VERSION_TYPE" != "auto" ]; then
            BUMP_TYPE="$INPUT_VERSION_TYPE"
            echo "Using manual version type: $BUMP_TYPE"
          else
            # Determine version bump type automatically
            BUMP_TYPE="patch"

            # Check for breaking changes (MAJOR)
            if echo "$COMMITS" | grep -qE "(BREAKING|breaking|!:|^[^:]+!:)"; then
              BUMP_TYPE="major"
            # Check for new features (MINOR)
            elif echo "$COMMITS" | grep -qE "(feat|feature|add|new):"; then
              BUMP_TYPE="minor"
            # Check for fixes (PATCH)
            elif echo "$COMMITS" | grep -qE "(fix|bug|patch|hotfix):"; then
              BUMP_TYPE="patch"
            fi
            echo "Auto-detected bump type: $BUMP_TYPE"
          fi

          echo "bump_type=$BUMP_TYPE" >> $GITHUB_OUTPUT
          echo "Final bump type: $BUMP_TYPE"

      - name: Calculate new version
        id: new_version
        run: |
          LATEST_TAG="${{ steps.latest_tag.outputs.latest_tag }}"
          BUMP_TYPE="${{ steps.version_bump.outputs.bump_type }}"

          # Remove 'v' prefix for calculation
          VERSION=${LATEST_TAG#v}

          # Split version into parts
          IFS='.' read -r -a VERSION_PARTS <<< "$VERSION"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}

          # Calculate new version based on bump type
          case $BUMP_TYPE in
            "major")
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            "minor")
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            "patch")
              PATCH=$((PATCH + 1))
              ;;
          esac

          NEW_VERSION="v${MAJOR}.${MINOR}.${PATCH}"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New version: $NEW_VERSION (was $LATEST_TAG)"

      - name: Check if version already exists
        id: check_version
        run: |
          NEW_VERSION="${{ steps.new_version.outputs.new_version }}"
          SKIP_CHECK="${{ github.event.inputs.skip_version_check }}"

          if [ "$SKIP_CHECK" = "true" ]; then
            echo "version_exists=false" >> $GITHUB_OUTPUT
            echo "⚠️ Skipping version check as requested - will create $NEW_VERSION even if it exists"
          elif git tag -l | grep -q "^${NEW_VERSION}$"; then
            echo "version_exists=true" >> $GITHUB_OUTPUT
            echo "❌ Version $NEW_VERSION already exists!"
          else
            echo "version_exists=false" >> $GITHUB_OUTPUT
            echo "✅ Version $NEW_VERSION is new"
          fi

      - name: Generate release notes
        id: release_notes
        if: steps.check_version.outputs.version_exists == 'false'
        run: |
          LATEST_TAG="${{ steps.latest_tag.outputs.latest_tag }}"
          NEW_VERSION="${{ steps.new_version.outputs.new_version }}"

          # Generate release notes from commits
          if [ "$LATEST_TAG" = "v1.0.0" ] && [ -z "$(git tag -l v1.0.0)" ]; then
            COMMITS=$(git log --pretty=format:"- %s (%h)" --no-merges)
          else
            COMMITS=$(git log ${LATEST_TAG}..HEAD --pretty=format:"- %s (%h)" --no-merges)
          fi

          # Create release notes
          cat > release_notes.md << EOF
          ## What's Changed

          $COMMITS

          **Full Changelog**: https://github.com/${{ github.repository }}/compare/${LATEST_TAG}...${NEW_VERSION}
          EOF

          echo "Release notes created:"
          cat release_notes.md

      - name: Create and push tag
        if: steps.check_version.outputs.version_exists == 'false'
        run: |
          NEW_VERSION="${{ steps.new_version.outputs.new_version }}"

          # Configure git
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Create tag
          git tag -a $NEW_VERSION -m "Release $NEW_VERSION"

          # Push tag
          git push origin $NEW_VERSION

          echo "Created and pushed tag: $NEW_VERSION"

      - name: Create GitHub Release
        if: steps.check_version.outputs.version_exists == 'false'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.new_version.outputs.new_version }}
          name: Release ${{ steps.new_version.outputs.new_version }}
          body_path: release_notes.md
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Verify Go module availability
        if: steps.check_version.outputs.version_exists == 'false'
        run: |
          NEW_VERSION="${{ steps.new_version.outputs.new_version }}"

          echo "Waiting for Go module proxy to index the new version..."
          sleep 30

          # Try to fetch the new version
          echo "Testing module availability..."
          go list -m github.com/Faze-Technologies/go-utils@$NEW_VERSION || echo "Module may take a few minutes to be available"

      - name: Summary
        if: steps.check_version.outputs.version_exists == 'false'
        run: |
          NEW_VERSION="${{ steps.new_version.outputs.new_version }}"
          BUMP_TYPE="${{ steps.version_bump.outputs.bump_type }}"
          VERSION_TYPE="${{ github.event.inputs.version_type }}"

          echo "🚀 Successfully released version $NEW_VERSION"
          echo "📈 Bump type: $BUMP_TYPE"
          if [ "$VERSION_TYPE" != "auto" ]; then
            echo "🎯 Triggered manually with version type: $VERSION_TYPE"
          else
            echo "🤖 Auto-detected version type from commits"
          fi
          echo "📦 Go module: github.com/Faze-Technologies/go-utils@$NEW_VERSION"
          echo "🔗 Release: https://github.com/${{ github.repository }}/releases/tag/$NEW_VERSION"
          echo "📚 Docs: https://pkg.go.dev/github.com/Faze-Technologies/go-utils@$NEW_VERSION"

      - name: Skip release (version exists)
        if: steps.check_version.outputs.version_exists == 'true'
        run: |
          NEW_VERSION="${{ steps.new_version.outputs.new_version }}"
          echo "⏭️ Skipping release - version $NEW_VERSION already exists"
